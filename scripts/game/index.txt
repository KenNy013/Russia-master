function changeStates({ type = 'answer', status }) {
	if (type === 'answer') {
		stateGame.lvl.words[stateGame.indexWord].isAnswered = true;
		stateGame.indexWord += 1;
	}

	if (type === 'status') {
		Object.entries(stateGameOption).forEach(([key, value], index, arr) => {
			if (index > 0) {
				if (arr[index - 1][1].status === variableStatus.success) {
					arr[index][1].status = variableStatus.available;
				}
			}
		});
	}
}

// помошник для отрисовки
function renderLetterBlock(letters) {
	try {
		LETTER_BLOCK.innerHTML = ``;
		letters
			.split('')
			.map((el, index) =>
				ARRAY_VOWELS.includes(el)
					? {
							letter: el,
							indexLetter: index,
					  }
					: null
			)
			.filter((el) => el)
			.forEach((el) => {
				LETTER_BLOCK.insertAdjacentHTML(
					'beforeend',
					`
        <button class="game__buttons-word" data-index="${el.indexLetter}">
          ${el.letter}
        </button>
		`
				);
			});
	} catch (error) {
		console.error(error);
	}
}

///Отрисовка дисплея
function renderDisplayGame(state) {
	try {
		const indexWord = state.indexWord;

		state.lvl.words.forEach((word, index) => {
			if (index === indexWord) {
				WORD_VIEW.innerHTML = word.viewText;
				renderLetterBlock(word.viewText);
			}
		});
	} catch (error) {
		console.error(error);
	}
}

///Проверка на пройденный этап

function checkFuncForButtonLvl() {
	try {
		BUTTON_CHANGE_LVL.forEach((lvl) => {
			if (stateGameOption[lvl.dataset.lvl].status === variableStatus.available) {
				lvl.classList.remove('disable');

				lvl.disabled = false;
			}

			if (stateGameOption[lvl.dataset.lvl].status === variableStatus.unavailable) {
				lvl.classList.add('disable');

				lvl.disabled = true;
			}

			if (stateGameOption[lvl.dataset.lvl].status === variableStatus.success) {
				lvl.classList.add('disable');

				lvl.disabled = false;
			}
		});
	} catch (error) {
		console.error('Check Func For Button Lvl', error);
	}
}



function checkStateFromFullTrueAnswer() {
	const ArrayCountTrueAnswer = stateGame.lvl.words.filter(
		(answer) => answer.isAnswered
	);

	if (ArrayCountTrueAnswer.length === stateGame.lvl.words.length) {
		stateGameOption[stateGame.nameLvl].status = variableStatus.success;

		changeStates({
			type: 'status',
		});
	}
}

//Проверка на правильный ответ

function checkTrueLetter() {
	try {
		const userSlectedId = this.dataset.index;

		const wordInArray = stateGame.lvl.words[stateGame.indexWord];

		if (+wordInArray.trueWordIndex === +userSlectedId) {
			changeStates({
				userSelectId: userSlectedId,
			});

			this.classList.add('success');

			this.disabled = true;

			setTimeout(() => {
				startGame(stateGame);
			}, 1000);
		} else {
			this.classList.add('error');

			setTimeout(() => {
				this.classList.remove('error');
			}, 1000);
		}
	} catch (error) {
		console.error(error);
	}
}

/// Функция для кнопки

function renderArrowButton() {
	if (stateGame.indexWord === 0) {
		BUTTON_CHANGE_WORD[0].classList.add('disable');
	} else {
		BUTTON_CHANGE_WORD[0].classList.remove('disable');
	}

	if (stateGame.indexWord === stateGame.lvl.words.length) {
		BUTTON_CHANGE_WORD[1].classList.add('disable');
	} else {
		BUTTON_CHANGE_WORD[1].classList.remove('disable');
	}
}

function onClickArrowButton() {}

//Старт игры

function startGame(state = stateGame) {
	checkStateFromFullTrueAnswer();

	checkFuncForButtonLvl();
	renderDisplayGame(state);

	renderArrowButton();

	const BUTTON_CHANGE_LETTER = Array.from(
		document.querySelectorAll('[data-index]')
	);

	BUTTON_CHANGE_LETTER.forEach((elem) => {
		elem.addEventListener('click', checkTrueLetter);
	});
}

startGame(stateGame);

BUTTON_CHANGE_WORD.forEach((btn) => {
	btn.addEventListener('click', (event) => {
		if (event.currentTarget.dataset.change === 'last') {
			if (stateGame.indexWord !== 0) {
			} else {
			}
		} else {
		}
	});
});

// addEventListener('click', () => {
// 	console.log('stateGame', stateGame);

// 	console.log('stateGameOption', stateGameOption[stateGame.nameLvl]);
// });
